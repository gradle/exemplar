task originalInputs() {
    doLast {
        file('inputs').mkdir()
        file('inputs/1.txt').text = 'Content for file 1.'
        file('inputs/2.txt').text = 'Content for file 2.'
        file('inputs/3.txt').text = 'Content for file 3.'
    }
}

// START SNIPPET updated-inputs
task updateInputs() {
    doLast {
        file('inputs/1.txt').text = 'Changed content for existing file 1.'
        file('inputs/4.txt').text = 'Content for new file 4.'
    }
}
// END SNIPPET updated-inputs

// START SNIPPET removed-input
task removeInput() {
    doLast {
        file('inputs/3.txt').delete()
    }
}
// END SNIPPET removed-input

// START SNIPPET removed-output
task removeOutput() {
    doLast {
        file("$buildDir/outputs/1.txt").delete()
    }
}
// END SNIPPET removed-output

// START SNIPPET reverse
task incrementalReverse(type: IncrementalReverseTask) {
    inputDir = file('inputs')
    outputDir = file("$buildDir/outputs")
    inputProperty = project.properties['taskInputProperty'] ?: 'original'
}
// END SNIPPET reverse

// START SNIPPET incremental-task
class IncrementalReverseTask extends DefaultTask {
    @InputDirectory
    def File inputDir

    @OutputDirectory
    def File outputDir

    @Input
    def inputProperty

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        println inputs.incremental ? 'CHANGED inputs considered out of date'
                                   : 'ALL inputs considered out of date'
        // START SNIPPET handle-non-incremental-inputs
        if (!inputs.incremental)
            project.delete(outputDir.listFiles())
        // END SNIPPET handle-non-incremental-inputs

        // START SNIPPET out-of-date-inputs
        inputs.outOfDate { change ->
            if (change.file.file) {
                println "out of date: ${change.file.name}"
                def targetFile = new File(outputDir, change.file.name)
                targetFile.text = change.file.text.reverse()
            }
        }
        // END SNIPPET out-of-date-inputs

        // START SNIPPET removed-inputs
        inputs.removed { change ->
            println "removed: ${change.file.name}"
            def targetFile = new File(outputDir, change.file.name)
            targetFile.delete()
        }
        // END SNIPPET removed-inputs
    }
}
// END SNIPPET incremental-task
